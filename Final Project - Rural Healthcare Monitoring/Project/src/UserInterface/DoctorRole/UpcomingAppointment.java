/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorRole;

import Business.Enterprise.Enterprise;
import Business.Organization.Hospital.DoctorOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.UserPriviligeWorkRequest;
import Business.WorkQueue.WorkRequest;
import com.twilio.sdk.TwilioRestClient;
import com.twilio.sdk.resource.factory.CallFactory;
import com.twilio.sdk.resource.instance.Call;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

/**
 *
 * @author hpanjwani
 */
public class UpcomingAppointment extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private DoctorOrganization doctorOrganization;
    private Enterprise enterprise;

    /**
     * Creates new form UpcomingAppointment
     */
    public UpcomingAppointment(JPanel userProcessContainer, UserAccount userAccount, DoctorOrganization doctorOrganization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.doctorOrganization = doctorOrganization;
        this.enterprise = enterprise;

        dateLabel.setVisible(false);
        appointmentDate.setVisible(false);
        submitBtn.setVisible(false);
        
        docLabel.setText("Doctor Name  Dr. " + userAccount.getUsername());
        hospitalName.setText("Hospital Name : " + userAccount.getUsername());

        populateRequestTable();
    }

    public void populateRequestTable() {

        DefaultTableModel model = (DefaultTableModel) requestTable.getModel();
        model.setRowCount(0);

        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
            if ((request.getStatus().equals("Appointment Requested")) || (request.getStatus().equals("Appointment Received"))
                    || (request.getStatus().equals("Appointment Confirm")) || (request.getStatus().equals("Appointment Denied"))) {
                Object[] row = new Object[6];
            //request.setStatus("RequestAmbulance");
                //request.setMessage("")
                row[0] = request;
                row[1] = request.getReceiver();
                row[2] = request.getSender();
                row[3] = request.getRequestDate();//((UserPriviligeWorkRequest) request).getPatient();
                row[4] = request.getStatus();
                row[5] = ((UserPriviligeWorkRequest) request).getTestResult();

                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        requestTable = new javax.swing.JTable();
        requestBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        rescheduleBtn = new javax.swing.JButton();
        dateLabel = new javax.swing.JLabel();
        appointmentDate = new com.toedter.calendar.JDateChooser();
        submitBtn = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        docLabel = new javax.swing.JLabel();
        hospitalName = new javax.swing.JLabel();

        requestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Doctor Name", "Patient Name", "Request Date", "Status", "Appointment Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        requestTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                requestTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(requestTable);

        requestBtn.setText("Confirm Booking");
        requestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel Booking");
        cancelBtn.setEnabled(false);
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel1.setText("UPCOMING APPOINTMENTS");

        rescheduleBtn.setText("Reschedule");
        rescheduleBtn.setEnabled(false);
        rescheduleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rescheduleBtnActionPerformed(evt);
            }
        });

        dateLabel.setText("Appointment Date:");

        submitBtn.setText("Reschedule");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon("/Users/hpanjwani/Documents/NEU/1st Sem/5100 AED Lab/panjwani_hari_001664735/Project/images/call.jpeg")); // NOI18N
        jButton1.setToolTipText("Call Patient");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        docLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        docLabel.setText("<doctorName>");

        hospitalName.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        hospitalName.setText("<hospitalName>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(104, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(backBtn)
                                    .addComponent(cancelBtn))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(398, 398, 398)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(requestBtn)
                                            .addComponent(rescheduleBtn)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(416, 416, 416)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(197, 197, 197))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(docLabel)
                                    .addComponent(hospitalName))
                                .addGap(214, 214, 214)))
                        .addGap(423, 423, 423))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(submitBtn)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dateLabel)
                                .addGap(18, 18, 18)
                                .addComponent(appointmentDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(457, 457, 457))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(docLabel)
                .addGap(18, 18, 18)
                .addComponent(hospitalName)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(requestBtn)
                            .addComponent(cancelBtn))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backBtn)
                            .addComponent(rescheduleBtn))
                        .addGap(8, 8, 8)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(appointmentDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(132, 132, 132))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_requestTableMousePressed
        // TODO add your handling code here:
        int selectedRow = requestTable.getSelectedRow();

        TableCellRenderer renderer = requestTable.getCellRenderer(selectedRow, 4);
        Component component = requestTable.prepareRenderer(renderer, selectedRow, 4);
        Object value = (String) requestTable.getModel().getValueAt(selectedRow, 4);

        if (value.toString().equals("Appointment Requested")) {
            requestBtn.setEnabled(true);
            cancelBtn.setEnabled(true);
            //assignBtn1.setEnabled(true);
        } else if (value.toString().equals("Appointment Confirm")) {
            requestBtn.setEnabled(false);
            //assignBtn1.setEnabled(false);
            cancelBtn.setEnabled(true);

            JOptionPane.showMessageDialog(this, "This Appointment is confirmed. Do you want to reschedule it?", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        } else if (value.toString().equals("Appointment Denied")) {
            cancelBtn.setEnabled(false);
            requestBtn.setEnabled(false);
            rescheduleBtn.setEnabled(true);
            //assignBtn1.setEnabled(true);
        } else {
            requestBtn.setEnabled(false);
            //assignBtn1.setEnabled(false);
        }
    }//GEN-LAST:event_requestTableMousePressed

    private void requestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestBtnActionPerformed

        int selectedRow = requestTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row!!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            UserPriviligeWorkRequest request = (UserPriviligeWorkRequest) requestTable.getValueAt(selectedRow, 0);
            request.setStatus("Appointment Confirm");

            populateRequestTable();
//            AppointmentDetailPanel appointmentDetailPanel = new AppointmentDetailPanel(userProcessContainer, userAccount, enterprise, request);
//            userProcessContainer.add("AppointmentDetailPanel", appointmentDetailPanel);
//            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_requestBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row!!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            UserPriviligeWorkRequest request = (UserPriviligeWorkRequest) requestTable.getValueAt(selectedRow, 0);
            request.setStatus("Appointment Denied");

            populateRequestTable();
            JOptionPane.showMessageDialog(this, "Appointment has been cancelled and user has been notified!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void rescheduleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rescheduleBtnActionPerformed
        // TODO add your handling code here:
        dateLabel.setVisible(true);
        appointmentDate.setVisible(true);
        submitBtn.setVisible(true);

    }//GEN-LAST:event_rescheduleBtnActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a appointment to reschedule!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        else if (appointmentDate.getDate() == null) {
            errorLabel.setText("Appointment Date cannot be empty");
            appointmentDate.setBackground(Color.yellow);            
            return;
        } else if (appointmentDate.getDate().before(new Date())) {
            errorLabel.setText("Appointment Date must be valid");
            appointmentDate.setBackground(Color.yellow);             
            return;
        } else {
            
            errorLabel.setText("");
            //Appointment Requested, Appointment Received, Appointment Confirm, Appointment Denied
            UserPriviligeWorkRequest requestReschulde = (UserPriviligeWorkRequest) requestTable.getValueAt(selectedRow, 0);
            requestReschulde.setStatus("Appointment Confirm");
            requestReschulde.setTestResult(String.valueOf(appointmentDate.getDate()));

            JOptionPane.showMessageDialog(this, "Rescheduled appointment is notified to patient!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);

            populateRequestTable();

            rescheduleBtn.setEnabled(false);
            cancelBtn.setEnabled(true);
            dateLabel.setVisible(false);
            appointmentDate.setVisible(false);
            submitBtn.setVisible(false);
        }
    }//GEN-LAST:event_submitBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
        TwilioRestClient client = new TwilioRestClient("ACed9063d440a1ce9ac3a8e17956d636d0", "12286f5126a24e62dcc171c1e3444901");
 
	// Build the parameters 
	List<NameValuePair> params = new ArrayList<NameValuePair>(); 
	params.add(new BasicNameValuePair("To", "+18577076049")); 
	params.add(new BasicNameValuePair("From", "+18577076050")); 
	params.add(new BasicNameValuePair("Url", "https://api.twilio.com/2010-04-01/Accounts/ACed9063d440a1ce9ac3a8e17956d636d0/Calls"));  
	params.add(new BasicNameValuePair("Method", "GET"));  
	params.add(new BasicNameValuePair("FallbackMethod", "GET"));  
	params.add(new BasicNameValuePair("StatusCallbackMethod", "GET"));    
	params.add(new BasicNameValuePair("Record", "false")); 
 
	CallFactory callFactory = client.getAccount().getCallFactory(); 
	Call call = callFactory.create(params); 
	System.out.println(call.getSid()); 
        }
        catch(Exception e) {
            
        }
 
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser appointmentDate;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel docLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel hospitalName;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton requestBtn;
    private javax.swing.JTable requestTable;
    private javax.swing.JButton rescheduleBtn;
    private javax.swing.JButton submitBtn;
    // End of variables declaration//GEN-END:variables
}
