/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientRole;

import Business.Business;
import Business.Enterprise.Enterprise;
import Business.Enterprise.PharmacyEnterprise;
import Business.Network.Network;
import Business.Organization.Hospital.Organization;
import Business.Organization.Pharmacy.StoreOrganization;
import Business.Patient.Order.MasterOrderCatalog;
import Business.Patient.Patient;
import Business.Pharmacy.Drug.Drug;
import Business.Pharmacy.Drug.Supplier;
import Business.Pharmacy.Drug.SupplierDirectory;
import Business.Patient.Order.Order;
import Business.Patient.Order.OrderCatalog;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hpanjwani
 */
public class OrderMedicinePanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Business business;
    private UserAccount userAccount;
    private Enterprise enter;
    
    private StoreOrganization storeOrganziation;
    private SupplierDirectory supplierDirectory;
    
    private Patient patient;
    //private OrderCatalog orderCatalog;
    private MasterOrderCatalog masterOrderCatalog;
    private OrderCatalog orderCatalog;
    
    private float saleVolume = 0;
    
    
    /**
     * Creates new form OrderMedicine
     */
    public OrderMedicinePanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enter, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.userAccount = userAccount;
        this.enter = enter;
        
        patient = (Patient)userAccount.getEmployee();
        //orderCatalog = patient.getOrderCatalog();
        masterOrderCatalog = patient.getMasterOrderCatalog();
        orderCatalog = new OrderCatalog();
        
        patientLabel.setText("Patient Name: " + userAccount.getUsername());
        enterpriseLabel.setText("Hospital Name: " + enter.getName());
        
        //  Getting the object from different enterprise
        for(Network network : business.getNetworkList()) {
            //System.out.println("Network " + network );
            //if(network.getName().equals("Boston"))  {
                //System.out.println("Boston");
            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())   {
                //System.out.println("Enterprise " + enterprise);
                if(enterprise instanceof PharmacyEnterprise) {
                    //System.out.println("Pharmacy Enter" + enterprise);
                    for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        //System.out.println("Organization " + org);
                        if(org instanceof StoreOrganization)    {
                            //System.out.println("store Orga " +  org);
                            storeOrganziation = (StoreOrganization)org;
                            break;
                        }
                    }
                break;
                }
            }
            //break;
            //}
        }
        
        supplierDirectory = storeOrganziation.getSupplierDirectory();
        
        populateSupplierCombo();
    }
    
    public void populateSupplierCombo()  {
        supplierComboBox.removeAllItems();
        
        for(Supplier supplier : supplierDirectory.getSupplierDirectory())   {
            supplierComboBox.addItem(supplier);
        }
        
        populateDrugTable();
    }
    
    public void populateDrugTable() {
        
        int rowCount = drugTable.getRowCount();
        
        DefaultTableModel dtm = (DefaultTableModel)drugTable.getModel();
        dtm.setRowCount(0);
        
        Supplier supplier = (Supplier)supplierComboBox.getSelectedItem();
        
        if(supplier !=  null)   {        
            for(Drug drug: supplier.getDrugCatalog().getDrugList()){

                Object row[] = new Object[4];
                row[0] = drug.getDrugID();
                row[1] = drug;
                row[2] = drug.getPrice();
                row[3] = drug.getAvail();

                dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        supplierComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        totalTextfield = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        drugTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        addtoCartButton6 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        removeBtn = new javax.swing.JButton();
        txtNewQuantity = new javax.swing.JTextField();
        btnModifyQuantity = new javax.swing.JButton();
        patientLabel = new javax.swing.JLabel();
        enterpriseLabel = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jLabel1.setText("Supplier");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 174, 110, 30));

        supplierComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboBoxActionPerformed(evt);
            }
        });
        add(supplierComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 205, 250, -1));

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel3.setText("BROWSE MEDICINES");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 25, -1, -1));

        totalTextfield.setEditable(false);
        add(totalTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(681, 204, 110, -1));

        drugTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Drug ID", "Drug Name", "Market Price", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(drugTable);
        if (drugTable.getColumnModel().getColumnCount() > 0) {
            drugTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 288, 577, 100));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jLabel2.setText("Supplier Product Catalog");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 250, 240, -1));

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jLabel5.setText("Quantity:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 390, -1, -1));

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        add(quantitySpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(485, 388, 62, -1));

        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });
        add(addtoCartButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(632, 388, -1, -1));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Drug Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 469, 580, 110));

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 632, 90, -1));

        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });
        add(btnCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(657, 597, -1, -1));

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jLabel4.setText("TOTAL Cart Value:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(526, 206, -1, -1));

        removeBtn.setText("Remove");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });
        add(removeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 597, -1, -1));
        add(txtNewQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(404, 597, 70, -1));

        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });
        add(btnModifyQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 597, -1, -1));

        patientLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        patientLabel.setText("jLabel2");
        add(patientLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(301, 80, -1, -1));

        enterpriseLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        enterpriseLabel.setText("jLabel3");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(301, 126, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void supplierComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboBoxActionPerformed
        // TODO add your handling code here:
        populateDrugTable();
    }//GEN-LAST:event_supplierComboBoxActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:

        int selectedRow = drugTable.getSelectedRow();

        if(selectedRow < 0)  {
            JOptionPane.showMessageDialog(this, "Please select a row!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Drug selectedDrug = (Drug)drugTable.getValueAt(selectedRow, 1);
        int salesPrice = selectedDrug.getPrice();

//        try {
//            salesPrice = Integer.parseInt(txtSalesPrice.getText());
//        }
//        catch(Exception e) {
//            JOptionPane.showMessageDialog(this, "Please enter sale price value!", "WARNING", JOptionPane.WARNING_MESSAGE);
//            return;
//        }

        //  Validate Quantity > 0 && Quantity <= Available
        int fetchedQuantity = (Integer)quantitySpinner.getValue();

        if(fetchedQuantity <= 0)    {
            JOptionPane.showMessageDialog(this, "Quantity should be greater than zero!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if(fetchedQuantity > selectedDrug.getAvail())    {
            JOptionPane.showMessageDialog(this, "Quantity should be less than availablity of Product!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        boolean alreadyPresent = false;

        // If order is already present in the command
        for(Order order : orderCatalog.getOrderCatalog())  {
            if(order.getDrug() ==  selectedDrug)   {

                //Supplier supp = (Supplier)supplierComboBox.getSelectedItem();
                
                alreadyPresent = true;

                //Updating the Availability in the Product Table
                int oldAvail = selectedDrug.getAvail();
                int newAvail = oldAvail - fetchedQuantity;
                selectedDrug.setAvail(newAvail);

                //Updating the saleVolume
                float total = ((order.getSalePrice() * order.getQuantity()) + (fetchedQuantity * salesPrice));
                order.setVolume(total);
                //patient.getOrderHistory().add(order);
                // Updating the availability of the cart
                order.setQuantity(order.getQuantity() + fetchedQuantity);
                
                
//                // Updating the availability of the cart
//                commission = (commission + calculateCommission(fetchedQuantity, salesPrice, selectedDrug));
                  saleVolume = (saleVolume + calculateSaleVolume(fetchedQuantity, salesPrice));
                  totalTextfield.setText(String.valueOf(saleVolume));

                //Populate both the table
                populateDrugTable();
                populateCartTable();

                break;
            }
        }

        // If order is added first time to the cart
        if(!alreadyPresent) {

            int oldAvail = selectedDrug.getAvail();
            int newAvail = oldAvail - fetchedQuantity;
            selectedDrug.setAvail(newAvail);
            
            //add product to the order
            orderCatalog.addOrder(fetchedQuantity, salesPrice, selectedDrug);
//            commission = (commission + calculateCommission(fetchedQuantity, salesPrice, selectedDrug));
            saleVolume = (saleVolume + calculateSaleVolume(fetchedQuantity, salesPrice));
            totalTextfield.setText(String.valueOf(saleVolume));

            //Populate both the table
            populateDrugTable();
            populateCartTable();
        }
    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    public float calculateSaleVolume(int quantity, int salePrice)   {
        
        float saleVol = 0;
        saleVol =(quantity * salePrice);
        return saleVol;
    }
    
    public void populateCartTable()    {
        
        DefaultTableModel dtm = (DefaultTableModel)orderTable.getModel();
        dtm.setRowCount(0);
        
        for(Order order : orderCatalog.getOrderCatalog()) {
            
            //commission = (float)(commission + order.getCommission());
            
            Object[] row = new Object[4];
            
            row[0] = order;
            row[1] = order.getSalePrice();
            row[2] = order.getQuantity();
            row[3] = order.getVolume();
            
            dtm.addRow(row);
        }
        
    //    commTextfield.setText(String.valueOf(commission));
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:

        if(orderCatalog.getOrderCatalog().size() > 0) {
            for(Order order : orderCatalog.getOrderCatalog())  {
                Drug drug = order.getDrug();
                drug.setAvail(drug.getAvail() + order.getQuantity());
            }

            orderCatalog.getOrderCatalog().removeAll(orderCatalog.getOrderCatalog());

            totalTextfield.setText("");
            saleVolume = 0;
//            aboveTargetPrice = 0;
//            belowTargetPrice = 0;
//            commission = 0;
        }

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:

        if(orderCatalog.getOrderCatalog().size() > 0) {

            //orderCatalog.addOrder(order);
            //orderList.addOrder(order);
            masterOrderCatalog.addOrder(orderCatalog);
            
            ////orderCatalog.setVolume(saleVolume + orderCatalog.getVolume());
            
            totalTextfield.setText("");
            quantitySpinner.setValue(0);
            
            orderCatalog = new OrderCatalog();
            
            populateDrugTable();
            populateCartTable();

            JOptionPane.showMessageDialog(this, "Order Added successfully!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        }
        else    {
            JOptionPane.showMessageDialog(this, "No order to checkout", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderTable.getSelectedRow();
        
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to remove!", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
        else    {
            Order order = (Order)orderTable.getValueAt(selectedRow, 0);
            
            // Resetting the Quantity before deleting it from cart
            Drug drug = order.getDrug();
            int oldAvail = drug.getAvail();
            int newAvail = oldAvail + order.getQuantity();
            drug.setAvail(newAvail);
            
            orderCatalog.getOrderCatalog().remove(order);
        
            populateCartTable();
            populateDrugTable();
            
            JOptionPane.showMessageDialog(this, "Product has been successfully remove from cart!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_removeBtnActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:

        int selectedRow = orderTable.getSelectedRow();

        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to modify!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //Checking the Modify Qunatity text field is not empty and zero
        if(!txtNewQuantity.getText().isEmpty() && !txtNewQuantity.getText().equals("0"))    {

            Order order = (Order)orderTable.getValueAt(selectedRow, 0);

            // Checking for the current availability in the Product Table
            int currentAvail = order.getDrug().getAvail();

            // Checking for the current availability in the Order Table
            int oldQuantity = order.getQuantity();

            // New Quantity which we get from Modify Quantity text field
            int newQuantity = Integer.parseInt(txtNewQuantity.getText());

            // Checking new Quantity is less than the over all Quantity avaialble for the product
            if(newQuantity <= (currentAvail + oldQuantity)) {

                // Setting the Quantity in the Order Table
                order.setQuantity(newQuantity);

                // Setting the Availability in the Product Table
                order.getDrug().setAvail(currentAvail + oldQuantity - newQuantity);

                populateDrugTable();
                populateCartTable();
            }
            else    {
                JOptionPane.showMessageDialog(this, "The new quantity is not within the availability", "WARNING", JOptionPane.WARNING_MESSAGE);
            }
        }
        else    {
            JOptionPane.showMessageDialog(this, "The quantity cannot be Zero or Empty", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnModifyQuantityActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JTable drugTable;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable orderTable;
    private javax.swing.JLabel patientLabel;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JButton removeBtn;
    private javax.swing.JComboBox supplierComboBox;
    private javax.swing.JTextField totalTextfield;
    private javax.swing.JTextField txtNewQuantity;
    // End of variables declaration//GEN-END:variables
}
