/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientRole;

import Business.Enterprise.Enterprise;
import Business.Organization.Hospital.DiabeteOrganization;
import Business.Organization.Hospital.DoctorOrganization;
import Business.Organization.Hospital.Organization;
import Business.Organization.Hospital.PatientOrganization;
import Business.Patient.Patient;
import Business.Person.Person;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.UserPriviligeWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hpanjwani
 */
public class UpcomingBookingPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;

    /**
     * Creates new form UpcomingBookingPanel
     */
    public UpcomingBookingPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;

        patientLabel.setText("Patient Name: " + userAccount.getUsername());
        enterpriseLabel.setText("Hospital Name: " + enterprise.getName());

        dateLabel.setVisible(false);
        appointmentDate.setVisible(false);
        submitBtn.setVisible(false);

        populateRequestTable();

    }

    public void populateRequestTable() {

        DefaultTableModel model = (DefaultTableModel) appointmentTable.getModel();
        model.setRowCount(0);

        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
            if ((request.getStatus().equals("Referred")) || (request.getStatus().equals("Request Received"))
                    || (request.getStatus().equals("Appointment Booked")) || (request.getStatus().equals("Appointment Cancel"))
                    || (request.getStatus().equals("Appointment Requested")) || (request.getStatus().equals("Appointment Received"))
                    || (request.getStatus().equals("Appointment Confirm")) || (request.getStatus().equals("Appointment Denied"))) {
                Object[] row = new Object[7];
                //request.setStatus("RequestAmbulance");
                //request.setMessage("")
                row[0] = request;
                row[1] = ((UserPriviligeWorkRequest) request).getDoctor();
                row[2] = ((UserPriviligeWorkRequest) request).getPatient();
                row[3] = request.getRequestDate();
                row[4] = request.getStatus();
                row[5] = ((UserPriviligeWorkRequest) request).getTestResult();

                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        dateLabel = new javax.swing.JLabel();
        reschuldeBtn = new javax.swing.JButton();
        appointmentDate = new com.toedter.calendar.JDateChooser();
        submitBtn = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        patientLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();

        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Doctor Name", "Patient Name", "Request Date", "Status", "Appointment Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appointmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                appointmentTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(appointmentTable);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setText("UPCOMING APPOINTMENTS");

        jButton1.setText("<< BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        dateLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        dateLabel.setText("Appointment Date:");

        reschuldeBtn.setText("RESCHEDULE APPOINTMENT");
        reschuldeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reschuldeBtnActionPerformed(evt);
            }
        });

        submitBtn.setText("Reschedule");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        enterpriseLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        enterpriseLabel.setText("jLabel3");

        patientLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        patientLabel.setText("jLabel2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(252, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(221, 221, 221))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(reschuldeBtn))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(80, 80, 80))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(submitBtn)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dateLabel)
                                .addGap(18, 18, 18)
                                .addComponent(appointmentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(339, 339, 339)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(enterpriseLabel)
                    .addComponent(patientLabel))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(69, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(patientLabel)
                .addGap(24, 24, 24)
                .addComponent(enterpriseLabel)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(reschuldeBtn))
                        .addGap(53, 53, 53)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                            .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(appointmentDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(152, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void appointmentTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentTableMousePressed
        // TODO add your handling code here:
//        int selectedRow = appointmentTable.getSelectedRow();
//
//        TableCellRenderer renderer = appointmentTable.getCellRenderer(selectedRow, 5);
//        Component component = appointmentTable.prepareRenderer(renderer, selectedRow, 5);
//        Object value = (String) appointmentTable.getModel().getValueAt(selectedRow, 5);
//
//        if (value.toString().equals("Referred")) {
//            requestBtn.setEnabled(false);
//            assignBtn1.setEnabled(true);
//        } else if (value.toString().equals("Request Received")) {
//            requestBtn.setEnabled(true);
//            assignBtn1.setEnabled(false);
//        } else if(value.toString().equals("Appointment Booked")){
//            requestBtn.setEnabled(false);
//            assignBtn1.setEnabled(false);
//        }
    }//GEN-LAST:event_appointmentTableMousePressed

    private void reschuldeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reschuldeBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = appointmentTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a appointment to reschedule!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        reschuldeBtn.setEnabled(false);
        dateLabel.setVisible(true);
        appointmentDate.setVisible(true);
        submitBtn.setVisible(true);

    }//GEN-LAST:event_reschuldeBtnActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = appointmentTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a appointment to reschedule!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (appointmentDate.getDate() == null) {
            errorLabel.setText("Appointment Date cannot be empty");
            appointmentDate.setBackground(Color.yellow);            
            return;
        } else if (appointmentDate.getDate().before(new Date())) {
            errorLabel.setText("Appointment Date must be valid");
            appointmentDate.setBackground(Color.yellow);             
            return;
        } else {
            errorLabel.setText("");
            
            //Appointment Requested, Appointment Received, Appointment Confirm, Appointment Denied
            UserPriviligeWorkRequest requestReschulde = (UserPriviligeWorkRequest) appointmentTable.getValueAt(selectedRow, 0);
            //requestReschulde.setStatus("Appointment Booked");
            requestReschulde.setTestResult(String.valueOf(appointmentDate.getDate()));

            Organization orga = null;
            UserAccount ua = ((UserPriviligeWorkRequest) requestReschulde).getDoctor();

            for (Organization organi : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organi instanceof DoctorOrganization) {
                    for (UserAccount user : organi.getUserAccountDirectory().getUserAccountList()) {
                        if (user.getUsername().equals(ua.getUsername())) {
                            orga = (DoctorOrganization) organi;
                            requestReschulde.setStatus("Appointment Requested");
                            break;
                        }
                    }
                    break;
                } else if (organi instanceof DiabeteOrganization) {
                    for (UserAccount user : organi.getUserAccountDirectory().getUserAccountList()) {
                        if (user.getUsername().equals(ua.getUsername())) {
                            orga = (DiabeteOrganization) organi;
                            requestReschulde.setStatus("Appointment Booked");
                            break;
                        }
                    }
                }
            }

            JOptionPane.showMessageDialog(this, "Your Appointment has been booked with Doctor!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);

            populateRequestTable();

            reschuldeBtn.setEnabled(true);
            dateLabel.setVisible(false);
            appointmentDate.setVisible(false);
            submitBtn.setVisible(false);
        }
    }//GEN-LAST:event_submitBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser appointmentDate;
    private javax.swing.JTable appointmentTable;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel patientLabel;
    private javax.swing.JButton reschuldeBtn;
    private javax.swing.JButton submitBtn;
    // End of variables declaration//GEN-END:variables
}
