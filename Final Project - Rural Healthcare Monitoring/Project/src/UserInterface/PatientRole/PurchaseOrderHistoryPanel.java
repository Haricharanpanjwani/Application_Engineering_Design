/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientRole;

import Business.Enterprise.Enterprise;
import Business.Patient.Order.Order;
import Business.Patient.Order.OrderCatalog;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.CardLayout;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hpanjwani
 */
public class PurchaseOrderHistoryPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Patient patient;
    private Enterprise enterprise;

    /**
     * Creates new form PurchaseOrderHistoryPanel
     */
    public PurchaseOrderHistoryPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise = enterprise;

        patient = (Patient) userAccount.getEmployee();

        patientLabel.setText("Patient Name: " + userAccount.getUsername());
        enterpriseLabel.setText("Hospital Name: " + enterprise.getName());

        populatePurchaseTable();

    }

    public void populatePurchaseTable() {

        DefaultTableModel model = (DefaultTableModel) purchaseTable.getModel();
        model.setRowCount(0);

        for (OrderCatalog orderCatalog : patient.getMasterOrderCatalog().getMasterOrderCatalog()) {
            if (!(orderCatalog.getOrderCatalog().isEmpty())) {
                for (Order order : orderCatalog.getOrderCatalog()) {
                    Object[] row = new Object[4];

                    //request.setMessage("")
                    row[0] = order;
                    row[1] = order.getQuantity();
                    row[2] = order.getVolume();
                    row[3] = order.getOrderDate();

                    model.addRow(row);
                }
            }
        }
    }
    
    public void createPdf(String dest) throws DocumentException, FileNotFoundException {
      Document document = new Document();
      PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(dest));
      document.open();
      
      PdfPTable pdfTable = new PdfPTable(purchaseTable.getColumnCount());
          //adding table headers
          for (int i = 0; i < purchaseTable.getColumnCount(); i++) {
              pdfTable.addCell(purchaseTable.getColumnName(i));
          }
          //extracting data from the JTable and inserting it to PdfPTable
          for (int rows = 0; rows <= (purchaseTable.getRowCount() - 1); rows++) {
              for (int cols = 0; cols < purchaseTable.getColumnCount(); cols++) {
                  pdfTable.addCell(purchaseTable.getModel().getValueAt(rows, cols).toString());

              }
          }
          pdfTable.addCell(new Phrase("Medicine Purchase History"));
         document.add(pdfTable);
         
         PdfPTable pdfTable1 = new PdfPTable(purchaseTable.getColumnCount());         

      document.close();
  
  }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        purchaseTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        patientLabel = new javax.swing.JLabel();
        enterpriseLabel = new javax.swing.JLabel();
        reportBtn = new javax.swing.JButton();

        purchaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Drug Name", "Drug Quantity", "Bill Amount", "Purchase Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        purchaseTable.setToolTipText("Medicine Purchase History");
        jScrollPane1.setViewportView(purchaseTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("PURCHASE ORDER HISOTRY");

        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        patientLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        patientLabel.setText("jLabel2");

        enterpriseLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        enterpriseLabel.setText("jLabel3");

        reportBtn.setText("DOWNLOAD PDF");
        reportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(325, 325, 325)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(enterpriseLabel)
                        .addComponent(patientLabel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(backBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(reportBtn))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jLabel1)))
                .addContainerGap(342, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(patientLabel)
                .addGap(24, 24, 24)
                .addComponent(enterpriseLabel)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(reportBtn))
                .addContainerGap(222, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void reportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportBtnActionPerformed
        // TODO add your handling code here:
        
        try {
          // TODO add your handling code here:
          
          String dest = "Purchase_History.pdf";
          File file = new File(dest);
          //file.getParentFile().mkdirs();
          createPdf(dest);
          
          JOptionPane.showMessageDialog(this, "Your medical purchase history pdf is successfully generated!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
      } catch (DocumentException ex) {
          Logger.getLogger(PatientWorkAreaPanel.class.getName()).log(Level.SEVERE, null, ex);
      } catch (FileNotFoundException ex) {
          Logger.getLogger(PatientWorkAreaPanel.class.getName()).log(Level.SEVERE, null, ex);
      }


    }//GEN-LAST:event_reportBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel patientLabel;
    private javax.swing.JTable purchaseTable;
    private javax.swing.JButton reportBtn;
    // End of variables declaration//GEN-END:variables
}
