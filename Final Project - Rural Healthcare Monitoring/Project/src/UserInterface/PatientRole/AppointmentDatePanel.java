/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientRole;

import Business.Business;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Hospital.DiabeteOrganization;
import Business.Organization.Hospital.DoctorOrganization;
import Business.Organization.Hospital.Organization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.UserPriviligeWorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.Date;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author hpanjwani
 */
public class AppointmentDatePanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Network network;
    private Enterprise enterprise;
    private UserAccount docUserAccount;
    private Business business;

    /**
     * Creates new form AppointmentDatePanel
     */
    public AppointmentDatePanel(JPanel userProcessContainer, UserAccount userAccount, Network network, Enterprise enterprise, UserAccount ua, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.network = network;
        this.enterprise = enterprise;
        this.docUserAccount = ua;
        this.business = business;

        patientLabel.setText("Patient Name: " + userAccount.getUsername());
        enterpriseLabel.setText("Hospital Name: " + enterprise.getName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        messageJTextField = new com.toedter.calendar.JDateChooser();
        requestTestJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        enterpriseLabel = new javax.swing.JLabel();
        patientLabel = new javax.swing.JLabel();
        appointLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jLabel1.setText("Appointment Date");

        messageJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                messageJTextFieldFocusLost(evt);
            }
        });

        requestTestJButton.setText("Request Appointment");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel2.setText("SCHEDULE AN APPOINTMENT");

        enterpriseLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        enterpriseLabel.setText("jLabel3");

        patientLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        patientLabel.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(enterpriseLabel)
                        .addComponent(patientLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(jLabel1))
                            .addComponent(backJButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(requestTestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(messageJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(appointLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(patientLabel)
                .addGap(23, 23, 23)
                .addComponent(enterpriseLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(messageJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backJButton)
                            .addComponent(requestTestJButton)))
                    .addComponent(appointLabel))
                .addContainerGap(225, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed

        Date appointmentDate = messageJTextField.getDate();

        if (messageJTextField.getDate() == null) {
            errorLabel.setText("Appointment Date cannot be empty");
            messageJTextField.setBackground(Color.yellow);
            return;
        } else if (messageJTextField.getDate().before(new Date())) {
            errorLabel.setText("Appointment Date must be valid");
            messageJTextField.setBackground(Color.yellow);
            return;
        } else {

            UserPriviligeWorkRequest requestAppointment = new UserPriviligeWorkRequest();
            requestAppointment.setMessage("Request for Appointment");
            requestAppointment.setSender(userAccount);
            requestAppointment.setPatient((Patient) userAccount.getEmployee());
            requestAppointment.setRequestDate(new Date());
            requestAppointment.setStatus("Appointment Requested");

            //Appointment Requested, Appointment Received, Appointment Confirm, Appointment Denied
            requestAppointment.setTestResult(String.valueOf(appointmentDate));

            for (Network net : business.getNetworkList()) {
                System.out.println("Network " + net);
                if (net.equals(network)) {
                    System.out.println(network);
                    for (Enterprise enter : net.getEnterpriseDirectory().getEnterpriseList()) {
                        System.out.println("Enterprise " + enter);
                        if (enter.equals(enterprise)) {
                            System.out.println(enter);
                            for (Organization org : enter.getOrganizationDirectory().getOrganizationList()) {
                                System.out.println("Organization " + org);
                                if (org instanceof DoctorOrganization) {
                                    System.out.println(org);
                                    for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                                        System.out.println(ua);
                                        if (ua.equals(docUserAccount)) {
                                            System.out.println(ua);
                                            docUserAccount.getWorkQueue().getWorkRequestList().add(requestAppointment);
                                            userAccount.getWorkQueue().getWorkRequestList().add(requestAppointment);
                                            requestAppointment.setDoctor(docUserAccount);
                                            break;
                                        }
                                    }
                                    break;
                                } else if (org instanceof DiabeteOrganization) {
                                    System.out.println(org);
                                    for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                                        System.out.println(ua);
                                        if (ua.equals(docUserAccount)) {
                                            System.out.println(ua);
                                            docUserAccount.getWorkQueue().getWorkRequestList().add(requestAppointment);
                                            userAccount.getWorkQueue().getWorkRequestList().add(requestAppointment);
                                            requestAppointment.setDoctor(docUserAccount);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            }
                            break;
                        }
                    }
                    break;
                }
            }

            Properties props = new Properties();
            props.put("mail.smtp.host", "smtp.gmail.com");
            props.put("mail.smtp.socketFactor.port", "465");
            props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.port", "465");
            Session session = Session.getDefaultInstance(props,
                    new javax.mail.Authenticator() {
                        protected PasswordAuthentication getPasswordAuthentication() {
                            return new PasswordAuthentication("northeastern1989@gmail.com", "abcxyz1989");
                        }
                    });

            try {
                Message message = new MimeMessage(session);
                message.setFrom(new InternetAddress("Xyz@gmail.com"));
                message.setRecipients(Message.RecipientType.TO, InternetAddress.parse("northeastern1989@gmail.com"));
                message.setSubject("Message");
                message.setText("Your booking has been confirmed for " + appointmentDate);
                Transport.send(message);
                JOptionPane.showMessageDialog(this, "Your appointment has been confirmed!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Email sent fail");
            }
        }

        messageJTextField.setCalendar(null);

    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void messageJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_messageJTextFieldFocusLost
        // TODO add your handling code here:
        final JTextComponent c = (JTextComponent) evt.getSource();
        String s = c.getText();

        if (evt.isTemporary()) {
            return;
        }
        if (messageJTextField.getDate() == null) {
            appointLabel.setText("Appointment Date cannot be blank");
            messageJTextField.setBackground(Color.yellow);
        } else {
            messageJTextField.setBackground(Color.white);
        }
    }//GEN-LAST:event_messageJTextFieldFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel appointLabel;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private com.toedter.calendar.JDateChooser messageJTextField;
    private javax.swing.JLabel patientLabel;
    private javax.swing.JButton requestTestJButton;
    // End of variables declaration//GEN-END:variables
}
