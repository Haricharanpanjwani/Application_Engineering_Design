/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.LabAssistantRole;

import Business.Enterprise.Enterprise;
import Business.Organization.Hospital.LabOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.UserPriviligeWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author hpanjwani
 */
public class LabAssistantWorkAreaPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private LabOrganization labOrganization;

    /**
     * Creates new form LabAssistantWorkAreaPanel
     */
    public LabAssistantWorkAreaPanel(JPanel userProcessContainer, UserAccount userAccount, LabOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.labOrganization = organization;
        this.enterprise = enterprise;

        enterpriseLabel.setText("Enterprise Name: " + enterprise.getName());
        labLabel.setText("Lab Assistant Name: " + userAccount.getUsername());

        populateLabTestTable();
    }

    public void populateLabTestTable() {

        DefaultTableModel model = (DefaultTableModel) labTestTable.getModel();
        model.setRowCount(0);

        for (WorkRequest request : labOrganization.getWorkQueue().getWorkRequestList()) {
            if ((request.getStatus().equals("Pending Test")) || (request.getStatus().equals("Processing Test"))
                    || (request.getStatus().equals("Test Completed"))) {
//
//                Patient patient = (Patient) ((UserPriviligeWorkRequest) request).getPatient();

                //int size = patient.getDonationList().size() - 1;
//                if(size < 0)   {
//                    break;
//                }
//                else    {
                Object[] row = new Object[8];

                row[0] = request;
                row[1] = request.getSender();
                row[2] = request.getReceiver();
                row[3] = ((UserPriviligeWorkRequest) request).getPatient();
                row[4] = request.getRequestDate();
                row[5] = request.getResolveDate();
                String result = ((UserPriviligeWorkRequest) request).getTestResult() == null ? null : ((UserPriviligeWorkRequest) request).getTestResult();
                row[6] = result;
                row[7] = request.getStatus();
//                    row[5] = request.getResolveDate();
//                    String result = ((LabTestWorkRequest) request).getTestResult();
//                    row[6] = result == null ? "Waiting" : result;
//                    
//                    if(result != null)    {
//                        for(int j = 0; j < d.getDonationList().size(); j++)   {
//                            if(d.getDonationList().get(j).equals(result))   {
//                                size  = j;
//                                System.out.println(size);
//                                break;
//                            }
//                        }
//                    }
//                    
//                    int unit = d.getDonationList().get(size).getUnit();
//                    row[7] = String.valueOf(unit) == null ? "Waiting" : String.valueOf(unit);

                model.addRow(row);
                //}
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        labTestTable = new javax.swing.JTable();
        assignBtn = new javax.swing.JButton();
        requestBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        labLabel = new javax.swing.JLabel();
        patientLabel = new javax.swing.JLabel();
        enterpriseLabel = new javax.swing.JLabel();

        labTestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Test Name", "Doctor Name", "Lab Assistant", "Patient Name", "Request Date", "Resolve Date", "Result", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        labTestTable.setToolTipText("Lab Test Request Table");
        labTestTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labTestTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(labTestTable);

        assignBtn.setText("Take Up");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });

        requestBtn.setText("EXECUTE >>");
        requestBtn.setEnabled(false);
        requestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestBtnActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel7.setText("LAB ASSISTANT DASHBOARD");

        labLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        labLabel.setText("<labAssistantName>");

        patientLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N

        enterpriseLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        enterpriseLabel.setText("<value>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(338, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(jLabel7))
                            .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labLabel)
                            .addComponent(patientLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(386, 386, 386))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(253, 253, 253))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(assignBtn)
                        .addGap(341, 341, 341)
                        .addComponent(requestBtn)
                        .addGap(296, 296, 296))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labLabel)
                .addGap(18, 18, 18)
                .addComponent(patientLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(requestBtn))
                .addContainerGap(176, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed
        // TODO add your handling code here:

        int selectedRow = labTestTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row!!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            WorkRequest request = (WorkRequest) labTestTable.getValueAt(selectedRow, 0);
            request.setReceiver(userAccount);
            request.setStatus("Processing Test");

            populateLabTestTable();
        }
    }//GEN-LAST:event_assignBtnActionPerformed

    private void requestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = labTestTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row!!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            WorkRequest request = (WorkRequest) labTestTable.getValueAt(selectedRow, 0);
            request.setReceiver(userAccount);
            //request.setStatus("Complete");

            populateLabTestTable();

            ProcessLabRequestPanel processLabRequestPanel = new ProcessLabRequestPanel(userProcessContainer, userAccount, enterprise, request);
            userProcessContainer.add("ProcessLabRequestPanel", processLabRequestPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_requestBtnActionPerformed

    private void labTestTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labTestTableMousePressed
        // TODO add your handling code here:
        int selectedRow = labTestTable.getSelectedRow();

        TableCellRenderer renderer = labTestTable.getCellRenderer(selectedRow, 7);
        Component component = labTestTable.prepareRenderer(renderer, selectedRow, 7);
        Object value = (String) labTestTable.getModel().getValueAt(selectedRow, 7);

        Object request = (UserPriviligeWorkRequest) labTestTable.getModel().getValueAt(selectedRow, 0);

        patientLabel.setText("Patient Name: " + ((UserPriviligeWorkRequest) request).getPatient().getName());

        if (value.toString().equals("Processing Test")) {

            UserAccount account = (UserAccount) labTestTable.getValueAt(selectedRow, 2);

            //Include if the user itself has assigned him that patient
            if (userAccount.equals(account)) {
                assignBtn.setEnabled(false);
                requestBtn.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(this, "Lab Test is processed by " + account, "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
                assignBtn.setEnabled(false);
                requestBtn.setEnabled(false);
            }
        } else if (value.toString().equals("Test Completed")) {
            JOptionPane.showMessageDialog(this, "Lab Test is already completed!!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
            assignBtn.setEnabled(false);
            requestBtn.setEnabled(false);
        } else {
            assignBtn.setEnabled(true);
            requestBtn.setEnabled(false);
        }
    }//GEN-LAST:event_labTestTableMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignBtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labLabel;
    private javax.swing.JTable labTestTable;
    private javax.swing.JLabel patientLabel;
    private javax.swing.JButton requestBtn;
    // End of variables declaration//GEN-END:variables
}
