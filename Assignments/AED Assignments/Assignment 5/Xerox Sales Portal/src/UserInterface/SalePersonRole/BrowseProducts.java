/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SalePersonRole;

import Business.Customer;
import Business.Order;
import Business.OrderCatalog;
import Business.OrderItem;
import Business.Product;
import Business.SalePerson;
import Business.Supplier;
import Business.SupplierDirectory;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hpanjwani
 */
public class BrowseProducts extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private SupplierDirectory supplierDirectory;
    private Customer customer;
    private SalePerson salePerson;
    private OrderCatalog orderCatalog;
    private OrderCatalog orderList;
    private OrderCatalog masterOrderCatalog;
    
    private Order order;
    
    private float commission = 0;
    private float saleVolume = 0;
    private int aboveTargetPrice = 0;
    private int belowTargetPrice = 0;
    
    /**
     * Creates new form BrowseProducts
     */
    public BrowseProducts(JPanel upc, SupplierDirectory supplierDirectory, Customer customer, SalePerson salePerson, OrderCatalog orderCatalog) {
        initComponents();
        userProcessContainer = upc;
        this.supplierDirectory = supplierDirectory;
        this.customer = customer;
        this.salePerson = salePerson;
        this.orderCatalog = salePerson.getOrderCatalog();
        this.orderList = customer.getOrderCatalog();
        masterOrderCatalog = orderCatalog;
        
        order = new Order();
        
        populateSupplier();
        
    }
    
    public void populateSupplier()  {
        supplierComboBox.removeAllItems();
        
        for(Supplier supplier : supplierDirectory.getSupplierDirectory())   {
            supplierComboBox.addItem(supplier);
        }
        
        populateProductTable();
    }
    
    public void populateProductTable()  {
        
        int rowCount = productTable.getRowCount();
        
        DefaultTableModel dtm = (DefaultTableModel)productTable.getModel();
        dtm.setRowCount(0);
        
        Supplier supplier = (Supplier)supplierComboBox.getSelectedItem();
        
        if(supplier !=  null)   {        
            for(Product p: supplier.getProductCatalog().getProductCatalog()){

                Object row[] = new Object[6];
                row[0] = p.getProdID();
                row[1] = p;
                row[2] = p.getAvail();
                row[3] = p.getFloorPrice();
                row[4] = p.getCeilingPrice();
                row[5] = p.getTargetPrice();

                dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        supplierComboBox = new javax.swing.JComboBox();
        commTextfield = new javax.swing.JTextField();
        commissionBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtSalesPrice = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        addtoCartButton6 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnCheckOut = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Supplier");

        supplierComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboBoxActionPerformed(evt);
            }
        });

        commissionBtn.setText("My Commission");
        commissionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commissionBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Supplier Product Catalog");

        jLabel6.setText("Sales Price");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Quantity:");

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel7.setText("Item in cart");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("BROWSE PRODUCTS");

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Name", "Availability", "Floor Price", "Ceiling Price", "Target Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(productTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addtoCartButton6))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(commissionBtn)
                                    .addGap(18, 18, 18)
                                    .addComponent(commTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnCheckOut)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(commissionBtn)
                    .addComponent(commTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCheckOut)
                            .addComponent(btnBack)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addtoCartButton6)))
                .addGap(95, 95, 95))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void supplierComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboBoxActionPerformed
        // TODO add your handling code here:
        populateProductTable();
    }//GEN-LAST:event_supplierComboBoxActionPerformed

    private void commissionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commissionBtnActionPerformed

//        String keyword = txtSearchKeyWord.getText();
//        refreshProductTable(keyword);
    }//GEN-LAST:event_commissionBtnActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:

        int selectedRow = productTable.getSelectedRow();

        if(selectedRow < 0)  {
            JOptionPane.showMessageDialog(this, "Please select a row!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Product selectedProduct = (Product)productTable.getValueAt(selectedRow, 1);
        int salesPrice = 0;

        try {
            salesPrice = Integer.parseInt(txtSalesPrice.getText());
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter sale price value!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //  Validate salesPrice >= floorPrice
        if(salesPrice < selectedProduct.getFloorPrice())    {
            JOptionPane.showMessageDialog(this, "Sales Price is less than Product Floor Price!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //  Validate salesPrice <= ceilingPrice
        if(salesPrice > selectedProduct.getCeilingPrice())    {
            JOptionPane.showMessageDialog(this, "Sales Price is greater than Product Ceiling Price!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //  Validate Quantity > 0 && Quantity <= Available
        int fetchedQuantity = (Integer)quantitySpinner.getValue();

        if(fetchedQuantity <= 0)    {
            JOptionPane.showMessageDialog(this, "Quantity should be greater than zero!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if(fetchedQuantity > selectedProduct.getAvail())    {
            JOptionPane.showMessageDialog(this, "Quantity should be less than availablity of Product!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        boolean alreadyPresent = false;

        // If item is already present in the command
        for(OrderItem item : order.getOrderItemList())  {
            if(item.getProduct() ==  selectedProduct)   {

                alreadyPresent = true;

                //Updating the Availability in the Product Table
                int oldAvail = selectedProduct.getAvail();
                int newAvail = oldAvail - fetchedQuantity;
                selectedProduct.setAvail(newAvail);
                
                //Updating the saleVolume
                float total = ((item.getSalePrice() * item.getQuantity()) + (fetchedQuantity * salesPrice));
                item.setVolume(total);
                
                // Updating the availability of the cart
                item.setQuantity(item.getQuantity() + fetchedQuantity);
                
                // Updating the availability of the cart
                commission = (commission + calculateCommission(fetchedQuantity, salesPrice, selectedProduct));
                saleVolume = (saleVolume + calculateSaleVolume(fetchedQuantity, salesPrice));
                
                //Populate both the table
                populateProductTable();
                populateCartTable();

                break;
            }
        }

        // If item is added first time to the cart
        if(!alreadyPresent) {
            
            int oldAvail = selectedProduct.getAvail();
            int newAvail = oldAvail - fetchedQuantity;
            selectedProduct.setAvail(newAvail);
           
            //add product to the order
            order.addOrderItem(fetchedQuantity, salesPrice, selectedProduct);
            
            commission = (commission + calculateCommission(fetchedQuantity, salesPrice, selectedProduct));
            saleVolume = (saleVolume + calculateSaleVolume(fetchedQuantity, salesPrice));
            
            //Populate both the table
            populateProductTable();
            populateCartTable();
        }
    }//GEN-LAST:event_addtoCartButton6ActionPerformed
    
    public float calculateSaleVolume(int quantity, int salePrice)   {
        
        float saleVol = 0;
        saleVol =(quantity * salePrice);
        return saleVol;
    }
    
    public float calculateCommission(int quantity, int salePrice, Product p)   {
        
        float comm = 0;
        
        if(salePrice <= p.getTargetPrice())   {
            comm = (float) (quantity * salePrice * 0.1);
            belowTargetPrice = belowTargetPrice + quantity;
            return comm;
        }   
        else if(salePrice > p.getTargetPrice())  {
            comm = (float) (quantity * salePrice * 0.2);
            aboveTargetPrice = aboveTargetPrice+quantity;
            return comm;
        }
        return comm;
    }
    
    public void populateCartTable()    {
        
        DefaultTableModel dtm = (DefaultTableModel)orderTable.getModel();
        dtm.setRowCount(0);
        
        for(OrderItem item : order.getOrderItemList()) {
            
            //commission = (float)(commission + item.getCommission());
            
            Object[] row = new Object[4];
            
            row[0] = item;
            row[1] = item.getSalePrice();
            row[2] = item.getQuantity();
            row[3] = item.getVolume();
            
            dtm.addRow(row);
        }
        
        commTextfield.setText(String.valueOf(commission));
    }
    
    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        
        if(order.getOrderItemList().size() > 0) {
            
            orderCatalog.addOrder(order);
            orderList.addOrder(order);
            masterOrderCatalog.addOrder(order);
            
            
            salePerson.setCommission(commission + salePerson.getCommission());
            salePerson.setSaleVolume(saleVolume + salePerson.getSaleVolume());
            salePerson.setAboveTargetPrice(aboveTargetPrice + salePerson.getAboveTargetPrice());
            salePerson.setBelowTargetPrice(belowTargetPrice + salePerson.getBelowTargetPrice());
            
            customer.setSaleVolume(saleVolume + customer.getSaleVolume());
            
            commTextfield.setText("");
            commission = 0;
            saleVolume = 0;
            aboveTargetPrice = 0;
            belowTargetPrice = 0;
            quantitySpinner.setValue(0);
            txtSalesPrice.setText("");
            
            order = new Order();
            
            populateCartTable();
            populateProductTable();

            JOptionPane.showMessageDialog(this, "Order Added successfully!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        }
        else    {
            JOptionPane.showMessageDialog(this, "No order to checkout", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:

        if(order.getOrderItemList().size() > 0) {
            for(OrderItem item : order.getOrderItemList())  {
                Product p = item.getProduct();
                p.setAvail(p.getAvail() + item.getQuantity());
            }
            
            order.getOrderItemList().removeAll(order.getOrderItemList());
            
            commTextfield.setText("");
            saleVolume = 0;
            aboveTargetPrice = 0;
            belowTargetPrice = 0;
            commission = 0;
        }

        userProcessContainer.remove(this);

        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JTextField commTextfield;
    private javax.swing.JButton commissionBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox supplierComboBox;
    private javax.swing.JTextField txtSalesPrice;
    // End of variables declaration//GEN-END:variables
}
