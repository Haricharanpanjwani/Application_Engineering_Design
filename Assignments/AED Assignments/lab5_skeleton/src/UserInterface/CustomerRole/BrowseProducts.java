/*
 * BrowseProducts.java
 *
 * Created on October 10, 2008, 9:10 AM
 */
package UserInterface.CustomerRole;

import Business.Order;
import Business.OrderCatalog;
import Business.OrderItem;
import Business.Product;
import Business.ProductCatalog;
import Business.Supplier;
import Business.SupplierDirectory;
import UserInterface.SupplierRole.ViewProductDetailJPanel;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rushabh
 */
public class BrowseProducts extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private SupplierDirectory supplierDirectory;
    private OrderCatalog orderCatalog;
    
    private Order order;

    /** Creates new form BrowseProducts */
    public BrowseProducts(JPanel userProcessContainer, SupplierDirectory supplierDirectory, OrderCatalog orderCatalog) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.supplierDirectory = supplierDirectory;
        this.orderCatalog = orderCatalog;      
        
        populateSupplier();
        
        order = new Order();
    }
    
    public void populateSupplier()  {
        
        suppComboBox1.removeAllItems();
        
        for(Supplier supplier : supplierDirectory.getSupplierlist())   {
            suppComboBox1.addItem(supplier);
        }
        
        populateProductTable();
    }
    
    public void populateProductTable()    {
        
        
        DefaultTableModel dtm = (DefaultTableModel)productTable.getModel();
        dtm.setRowCount(0);
        
        Supplier supplier = (Supplier)suppComboBox1.getSelectedItem();
        
        if(supplier !=  null)   {        
            for(Product product : supplier.getProductCatalog().getProductcatalog())   {
                
                Object[] row = new Object[4];
                
                row[0] = product;
                row[1] = product.getModelNumber();
                row[2] = product.getPrice();
                row[3] = product.getAvail();
                
                dtm.addRow(row);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        suppComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        viewProdjButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        btnSearchProduct = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtSalesPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnViewOrderItem = new javax.swing.JButton();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        txtSearchKeyWord = new javax.swing.JTextField();
        txtNewQuantity = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(750, 511));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        productTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Product Id", "Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 590, 100));

        suppComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppComboBox1ActionPerformed(evt);
            }
        });
        add(suppComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 250, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Supplier");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 110, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Supplier Product Catalog");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 240, -1));

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 590, 90, -1));

        viewProdjButton2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        viewProdjButton2.setText("View Product Detail");
        viewProdjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProdjButton2ActionPerformed(evt);
            }
        });
        add(viewProdjButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 340, 160, -1));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Vijaya", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 0, 0));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/CustomerRole/bestbuy.gif"))); // NOI18N
        jLabel4.setText("Welcome To Please Buy !");
        jLabel4.setIconTextGap(7);
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, -1, -1));

        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });
        add(addtoCartButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 340, -1, -1));

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        add(quantitySpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 340, 40, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Quantity:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 340, -1, -1));

        btnSearchProduct.setText("Search Product");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });
        add(btnSearchProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 140, -1, -1));

        jLabel6.setText("Sales Price");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 340, -1, -1));
        add(txtSalesPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 340, 40, -1));

        jLabel7.setText("Item in cart");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, -1, -1));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 580, 110));

        btnViewOrderItem.setText("View Item");
        btnViewOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderItemActionPerformed(evt);
            }
        });
        add(btnViewOrderItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 550, -1, -1));

        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });
        add(btnModifyQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 550, -1, -1));

        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });
        add(btnRemoveOrderItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 550, -1, -1));

        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });
        add(btnCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 550, -1, -1));
        add(txtSearchKeyWord, new org.netbeans.lib.awtextra.AbsoluteConstraints(342, 140, 110, -1));
        add(txtNewQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 550, 70, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void suppComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppComboBox1ActionPerformed
        // TODO add your handling code here:
        populateProductTable();
    }//GEN-LAST:event_suppComboBox1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        
        if(order.getOrderItemList().size() > 0) {
            for(OrderItem item : order.getOrderItemList())  {
                Product p = item.getProduct();
                p.setAvail(p.getAvail() + item.getQuantity());
            }
            
            order.getOrderItemList().removeAll(order.getOrderItemList());    
        }
        
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void viewProdjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProdjButton2ActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = productTable.getSelectedRow();
        
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        }
        else    {
            Product product = (Product)productTable.getValueAt(selectedRow, 0);
            
            ViewProductDetailJPanel viewProductPanel = new ViewProductDetailJPanel(userProcessContainer, product);
            userProcessContainer.add("ViewProductDetailJPanel", viewProductPanel);
            CardLayout layout = (CardLayout)userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_viewProdjButton2ActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = productTable.getSelectedRow();

        if(selectedRow < 0)  {
            JOptionPane.showMessageDialog(this, "Please select a row!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
       
        Product selectedProduct = (Product)productTable.getValueAt(selectedRow, 0);
        int salesPrice = 0;
        
        try {
            salesPrice = Integer.parseInt(txtSalesPrice.getText());            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter sale price value!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //  Validate salesPrice >= productPrice
        if(salesPrice < selectedProduct.getPrice())    {
            JOptionPane.showMessageDialog(this, "Sales Price is less than Product Price!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //  Validate Quantity > 0 && Quantity <= Available
        int fetchedQuantity = (Integer)quantitySpinner.getValue();
        
        if(fetchedQuantity <= 0)    {
            JOptionPane.showMessageDialog(this, "Quantity should be greater than zero!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
          
        if(fetchedQuantity > selectedProduct.getAvail())    {
            JOptionPane.showMessageDialog(this, "Quantity should be less than availablity of Product!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        boolean alreadyPresent = false;
        
        // If item is already present in the command
        for(OrderItem item : order.getOrderItemList())  {
            if(item.getProduct() ==  selectedProduct)   {
                
                alreadyPresent = true;
                
                //Updating the Availability in the Product Table
                int oldAvail = selectedProduct.getAvail();
                int newAvail = oldAvail - fetchedQuantity;
                selectedProduct.setAvail(newAvail);
                
                // Updating the availability of the cart
                item.setQuantity(item.getQuantity() + fetchedQuantity);
                
                //Populate both the table
                populateProductTable();
                populateCartTable();
                
                break;
            }
        }
        
            // If item is added first time to the cart
            if(!alreadyPresent) {

                int oldAvail = selectedProduct.getAvail();
                int newAvail = oldAvail - fetchedQuantity;
                selectedProduct.setAvail(newAvail);

                //add product to the order
                order.addOrderItem(fetchedQuantity, salesPrice, selectedProduct);

                //Populate both the table
                populateProductTable();
                populateCartTable();
            }
    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    public void populateCartTable()    {
        
        DefaultTableModel dtm = (DefaultTableModel)orderTable.getModel();
        dtm.setRowCount(0);
        
        for(OrderItem item : order.getOrderItemList()) {
            Object[] row = new Object[4];
            
            row[0] = item;
            row[1] = item.getSalePrice();
            row[2] = item.getQuantity();
            row[3] = item.getSalePrice() * item.getQuantity();
            
            dtm.addRow(row);
        }
    }
    
    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
       
        if(order.getOrderItemList().size() > 0) {
            
            orderCatalog.addOrder(order);
            
            order = new Order();
            
            populateCartTable();
            populateProductTable();
            
            JOptionPane.showMessageDialog(this, "Order Added successfully!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        }
        else    {
            JOptionPane.showMessageDialog(this, "No order to checkout", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = orderTable.getSelectedRow();
        
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to modify!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Checking the Modify Qunatity text field is not empty and zero
        if(!txtNewQuantity.getText().isEmpty() && !txtNewQuantity.getText().equals("0"))    {
            
            OrderItem item = (OrderItem)orderTable.getValueAt(selectedRow, 0);
            
            // Checking for the current availability in the Product Table
            int currentAvail = item.getProduct().getAvail();
            
            // Checking for the current availability in the Order Table
            int oldQuantity = item.getQuantity();
            
            // New Quantity which we get from Modify Quantity text field
            int newQuantity = Integer.parseInt(txtNewQuantity.getText());
            
            // Checking new Quantity is less than the over all Quantity avaialble for the product
            if(newQuantity <= (currentAvail + oldQuantity)) {
                
                // Setting the Quantity in the Order Table
                item.setQuantity(newQuantity);
                
                // Setting the Availability in the Product Table
                item.getProduct().setAvail(currentAvail + oldQuantity - newQuantity);
                
                populateProductTable();
                populateCartTable();
            }
            else    {
                JOptionPane.showMessageDialog(this, "The new quantity is not within the availability", "WARNING", JOptionPane.WARNING_MESSAGE);
            }
        }
        else    {
            JOptionPane.showMessageDialog(this, "The quantity cannot be Zero or Empty", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
        
        String keyword = txtSearchKeyWord.getText();
        refreshProductTable(keyword);
    }//GEN-LAST:event_btnSearchProductActionPerformed

    public void refreshProductTable(String keyword) {
        DefaultTableModel dtm = (DefaultTableModel)productTable.getModel();
        dtm.setRowCount(0);
        
        for(Supplier supplier : supplierDirectory.getSupplierlist())    {
            for(Product product : supplier.getProductCatalog().getProductcatalog()) {
                if(product.getProdName().equals(keyword))   {
                    
                    Object[] row = new Object[4];
                
                    row[0] = product;
                    row[1] = product.getModelNumber();
                    row[2] = product.getPrice();
                    row[3] = product.getAvail();

                    dtm.addRow(row);
                }
            }
        }
    }
    
    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        
        int selectedRow = orderTable.getSelectedRow();
        
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to remove!", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
        else    {
            OrderItem item = (OrderItem)orderTable.getValueAt(selectedRow, 0);
            
            // Resetting the Quantity before deleting it from cart
            Product product = item.getProduct();
            int oldAvail = product.getAvail();
            int newAvail = oldAvail + item.getQuantity();
            product.setAvail(newAvail);
            
            order.getOrderItemList().remove(item);
        
            populateCartTable();
            populateProductTable();
            
            JOptionPane.showMessageDialog(this, "Product has been successfully remove from cart!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnViewOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderItemActionPerformed
        
    }//GEN-LAST:event_btnViewOrderItemActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JButton btnViewOrderItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox suppComboBox1;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JTextField txtSalesPrice;
    private javax.swing.JTextField txtSearchKeyWord;
    private javax.swing.JButton viewProdjButton2;
    // End of variables declaration//GEN-END:variables
}
