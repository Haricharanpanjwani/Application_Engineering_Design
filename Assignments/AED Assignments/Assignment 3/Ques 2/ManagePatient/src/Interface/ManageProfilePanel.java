/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Patient;
import Business.Person;
import Business.PersonDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hpanjwani
 */
public class ManageProfilePanel extends javax.swing.JPanel {
    
    private ArrayList<Person> personList;
    private PersonDirectory personDirectory;
    private JPanel userProcessContainer;
    //private Person person;

    /**
     * Creates new form ManageProfilePanel
     */
    public ManageProfilePanel(PersonDirectory personDirectory, JPanel userProcessContainer) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.personDirectory = personDirectory;
        this.personList = personDirectory.getPersonList();
        
        populateTable();
    }
    
    public void populateTable() {
        //Get the Table Model
        DefaultTableModel dtm = (DefaultTableModel)profileTable.getModel();
        
        dtm.setRowCount(0);
        
        for(Person person :  personList)   {   
            Object row[] = new Object[3];
            
            row[0] = person;
            row[1] = person.getEmail();
            row[2] = person.getPhoneNumber();
            
            //add each person to the table for dispalay
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        profileTable = new javax.swing.JTable();
        deleteBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        viewPatientBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));

        profileTable.setBackground(new java.awt.Color(204, 255, 255));
        profileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Email ID", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(profileTable);

        deleteBtn.setBackground(new java.awt.Color(255, 255, 204));
        deleteBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        deleteBtn.setText("Delete Person");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        editBtn.setBackground(new java.awt.Color(255, 255, 204));
        editBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        editBtn.setText("Edit Person Profile");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(255, 255, 204));
        searchBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        searchBtn.setText("Search Person by Person Name");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        backBtn.setBackground(new java.awt.Color(255, 255, 204));
        backBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        viewPatientBtn.setBackground(new java.awt.Color(255, 255, 204));
        viewPatientBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        viewPatientBtn.setText("View Patient Record");
        viewPatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchBtn)
                        .addGap(30, 30, 30)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(deleteBtn)
                            .addGap(18, 18, 18)
                            .addComponent(editBtn)
                            .addGap(18, 18, 18)
                            .addComponent(viewPatientBtn))
                        .addComponent(backBtn)))
                .addContainerGap(165, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn)
                    .addComponent(editBtn)
                    .addComponent(viewPatientBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBtn)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backBtn)
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:

        //get the selected row
        int selectedRow = profileTable.getSelectedRow();

        if(selectedRow >= 0)    {

            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this row ?", "Warning", dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION)  {

                Person person = (Person)profileTable.getValueAt(selectedRow, 0);
                personList.remove(person);
                JOptionPane.showMessageDialog(this, "Person Information has been deleted", "Information", JOptionPane.INFORMATION_MESSAGE);

                //Populate the new Table after deleting the account
                populateTable();
            }
        }
        else    {
            JOptionPane.showMessageDialog(this, "Please select a row!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:

        int selectedRow = profileTable.getSelectedRow();

        if(selectedRow >= 0)    {
            //get the selected row
            Person person = (Person)profileTable.getValueAt(selectedRow, 0);

            ViewPersonPanel viewPersonPanel = new ViewPersonPanel(person, userProcessContainer, this);
            userProcessContainer.add("ViewPersonPanel",viewPersonPanel);
            CardLayout layout = (CardLayout)userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        else    {
            JOptionPane.showMessageDialog(this, "Please select a row!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:

        //get the input
        String personName = searchTextField.getText();

        //search the account
        Person person = personDirectory.searchPerson(personName);

        if(person == null) {
            //Display the message that person not found
            JOptionPane.showMessageDialog(this, "There is no person with this name in the Directory!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        }else   {
            if(person.getPatientList().isEmpty())   {
                JOptionPane.showMessageDialog(this, "There is a person with name : "+ person.getFirstName() + "!\n But there is no patient information realated with person " + person.getFirstName()+ " in the Directory!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
            }
            else    {
                //display the person details on search results
                SearchResultPanel searchPanel = new SearchResultPanel(person, userProcessContainer);
                userProcessContainer.add("searchPanel",searchPanel);
                CardLayout layout = (CardLayout)userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void viewPatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientBtnActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = profileTable.getSelectedRow();

        if(selectedRow >= 0)    {
            
            //get the selected row
            Person person = (Person)profileTable.getValueAt(selectedRow, 0);
            
            if(person.getPatientList().isEmpty()) {
                JOptionPane.showMessageDialog(this, "There is no patient record!!", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else    {
                ViewPatientPanel viewPatientPanel =  new ViewPatientPanel(person, userProcessContainer);
                userProcessContainer.add("ViewPatientPanel", viewPatientPanel);
                CardLayout layout = (CardLayout)userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        }
        else    {
            JOptionPane.showMessageDialog(this, "Please select a row!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_viewPatientBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable profileTable;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton viewPatientBtn;
    // End of variables declaration//GEN-END:variables
}
