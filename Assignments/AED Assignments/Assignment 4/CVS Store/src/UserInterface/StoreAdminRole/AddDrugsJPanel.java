/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.StoreAdminRole;

import Business.Drug;
import Business.Store;
import Business.Supplier;
import Business.SupplierCatalog;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hpanjwani
 */
public class AddDrugsJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private SupplierCatalog supplierCatalog;
    private Store store;
    
    /**
     * Creates new form ManageDrugInventoryJPanel
     */
    public AddDrugsJPanel(JPanel userProcessContainer, SupplierCatalog supplierCatalog, Store store) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.supplierCatalog = supplierCatalog;
        this.store = store;
        
        locationLabel.setText(store.getLocation());
        populateSupplier();
        populateStoreTable();
    }
    
    public void populateSupplier()  {
        
        supplierComboBox.removeAllItems();
        
        for(Supplier supplier : supplierCatalog.getSupplierCatalog())   {
            supplierComboBox.addItem(supplier);
        }
        
        populateDrugTable();
    }
    
    public void populateDrugTable()    {
        
        DefaultTableModel dtm = (DefaultTableModel)drugTable.getModel();
        dtm.setRowCount(0);
        
        Supplier supplier = (Supplier)supplierComboBox.getSelectedItem();
        
        if(supplier !=  null)   {        
            for(Drug drug : supplier.getDrugCatalog().getDrugList())  {
                
                Object[] row = new Object[4];
                
                row[0] = drug.getDrugID();
                row[1] = drug;
                row[2] = drug.getListPrice();
                row[3] = drug.getAvail();
                
                dtm.addRow(row);
            }
        }
    }
    
    public void populateStoreTable()    {
        
        DefaultTableModel dtm = (DefaultTableModel)storeTable.getModel();
        dtm.setRowCount(0);
        
        if(store !=  null)   {        
            for(Drug drug : store.getDrugCatalog().getDrugList())  {
                
                Object[] row = new Object[4];
                
                row[0] = drug.getDrugID();
                row[1] = drug;
                row[2] = drug.getListPrice();
                row[3] = drug.getAvail();
                
                dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        supplierComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        drugTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        storeTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        salesPriceTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        addtoCartButton6 = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        locationLabel = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Supplier");

        supplierComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Supplier Drug Catalog");

        drugTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        drugTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Drug ID", "Drug Name", "Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(drugTable);
        if (drugTable.getColumnModel().getColumnCount() > 0) {
            drugTable.getColumnModel().getColumn(0).setResizable(false);
            drugTable.getColumnModel().getColumn(1).setResizable(false);
            drugTable.getColumnModel().getColumn(2).setResizable(false);
            drugTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel7.setText("Drugs available in Store");

        storeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Drug ID", "Drug Name", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(storeTable);
        if (storeTable.getColumnModel().getColumnCount() > 0) {
            storeTable.getColumnModel().getColumn(0).setResizable(false);
            storeTable.getColumnModel().getColumn(1).setResizable(false);
            storeTable.getColumnModel().getColumn(2).setResizable(false);
            storeTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel6.setText("Sales Price");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Quantity:");

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel3.setText("Location:");

        locationLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        locationLabel.setText("locationLabel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(locationLabel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addGap(18, 18, 18)
                            .addComponent(salesPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel5)
                            .addGap(18, 18, 18)
                            .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addtoCartButton6))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(salesPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(locationLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(addtoCartButton6))
                .addGap(56, 56, 56))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void supplierComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboBoxActionPerformed
        // TODO add your handling code here:
        populateDrugTable();
    }//GEN-LAST:event_supplierComboBoxActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:

        int selectedRow = drugTable.getSelectedRow();

        if(selectedRow < 0)  {
            JOptionPane.showMessageDialog(this, "Please select a row!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Drug selectedDrug = (Drug)drugTable.getValueAt(selectedRow, 1);
        int salesPrice = 0;

        try {
            salesPrice = Integer.parseInt(salesPriceTextField.getText());
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter sale price value!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //  Validate salesPrice >= productPrice
        if(salesPrice < selectedDrug.getListPrice())    {
            JOptionPane.showMessageDialog(this, "Sales Price is less than Product Price!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //  Validate Quantity > 0 && Quantity <= Available
        int fetchedQuantity = (Integer)quantitySpinner.getValue();

        if(fetchedQuantity <= 0)    {
            JOptionPane.showMessageDialog(this, "Quantity should be greater than zero!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if(fetchedQuantity > selectedDrug.getAvail())    {
            JOptionPane.showMessageDialog(this, "Quantity should be less than availablity of Product!", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }

        boolean alreadyPresent = false;

        // If item is already present in the command
        //if(store.getDrugCatalog().getDrugList().size() > 0)   {
            for(Drug drug : store.getDrugCatalog().getDrugList())  {
                if(drug.getDrugName().equals(selectedDrug.getDrugName()))   {
                    alreadyPresent = true;

                    //Updating the Availability in the Product Table
                    int oldAvail = selectedDrug.getAvail();
                    int newAvail = oldAvail - fetchedQuantity;
                    selectedDrug.setAvail(newAvail);

                    // Updating the availability of the cart
                    drug.setAvail(drug.getAvail() + fetchedQuantity);
                    
                    //Populate both the table
                    populateDrugTable();
                    populateCartTable();

                    break;
                }
            }
        //}
        
        // If item is added first time to the cart
        if(!alreadyPresent) {
            
            int oldAvail = selectedDrug.getAvail();
            int newAvail = oldAvail - fetchedQuantity;
            selectedDrug.setAvail(newAvail);

            //add product to the order
            Drug newDrug = store.getDrugCatalog().addDrug();
            newDrug.setAvail(fetchedQuantity);
            newDrug.setListPrice(salesPrice);
            newDrug.setDrugName((String.valueOf(selectedDrug)));
            newDrug.setDrugID(selectedDrug.getDrugID());
            newDrug.setPrice(selectedDrug.getPrice());
            //order.addOrderItem(fetchedQuantity, salesPrice, selectedDrug);

            //Populate both the table
            populateDrugTable();
            populateCartTable();
        }
    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    public void populateCartTable()    {
        
        DefaultTableModel dtm = (DefaultTableModel)storeTable.getModel();
        dtm.setRowCount(0);
        
        for(Drug drug : store.getDrugCatalog().getDrugList()) {
            Object[] row = new Object[4];
            
            row[0] = drug.getDrugID();
            row[1] = drug;
            row[2] = drug.getListPrice();
            row[3] = drug.getAvail();
            
            dtm.addRow(row);
        }
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
//        
//        if(store.getDrugCatalog().getDrugList().size() > 0) {
//            for(Drug drug : store.getDrugCatalog().getDrugList())   {
//                
//            }
//        }
//        
//        if(order.getOrderItemList().size() > 0) {
//            for(OrderItem item : order.getOrderItemList())  {
//                Product p = item.getProduct();
//                p.setAvail(p.getAvail() + item.getQuantity());
//            }
//
//            order.getOrderItemList().removeAll(order.getOrderItemList());
//        }

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JTable drugTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTextField salesPriceTextField;
    private javax.swing.JTable storeTable;
    private javax.swing.JComboBox supplierComboBox;
    // End of variables declaration//GEN-END:variables
}
